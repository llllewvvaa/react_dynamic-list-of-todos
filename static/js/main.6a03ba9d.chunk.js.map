{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","getVisibleTodos.tsx","index.tsx"],"names":["TodoList","memo","todos","onSelectTodoId","selectedTodoId","className","map","todo","id","completed","cn","title","type","onClick","TodoFilter","onQuery","onStatus","onDeleteQuery","query","status","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onCloseModal","useState","currentUser","setCurrentUser","useEffect","userId","href","email","name","App","setTodos","setSelectedTodoId","setStatus","setQuery","error","handleSelectTodoId","useCallback","handleQuery","handleDeleteQuery","handleStatus","handleCloseModal","selectedTodo","useMemo","find","visibleTodos","normalizedQuery","toLowerCase","split","filter","Boolean","join","isStatusMatch","isIncludeQuery","includes","getVisibleTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a03ba9d.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  onSelectTodoId: (todoId: number) => void;\n  selectedTodoId: number;\n};\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos,\n  onSelectTodoId,\n  selectedTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          key={todo.id}\n          data-cy=\"todo\"\n          className=\"\"\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={cn({\n              'has-text-success': todo.completed,\n              'has-text-danger': !todo.completed,\n            })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onSelectTodoId(todo.id)}\n            >\n              <span className=\"icon\">\n                <i className={`far ${selectedTodoId === todo.id\n                  ? 'fa-eye-slash'\n                  : 'fa-eye'}`}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n));\n","import { FC, memo } from 'react';\n\ninterface Props {\n  onQuery: (str: string) => void;\n  onStatus: (str: string) => void;\n  onDeleteQuery: () => void;\n  query: string;\n  status: string;\n}\n\nexport const TodoFilter: FC<Props> = memo(({\n  onQuery,\n  onStatus,\n  onDeleteQuery,\n  query,\n  status,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={status}\n          onChange={(event) => onStatus(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => onQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={onDeleteQuery}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n));\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { memo, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  todo: Todo;\n  onCloseModal: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = memo(({\n  todo,\n  onCloseModal,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    try {\n      getUser(todo.userId)\n        .then(setCurrentUser);\n    } catch {\n      setCurrentUser(null);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!currentUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className=\"has-text-danger\">\n                {\n                  todo.completed ? (\n                    'Done'\n                  ) : (\n                    'Planned'\n                  )\n                }\n              </strong>\n\n              {' by '}\n\n              <a href={currentUser.email}>\n                {currentUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { getVisibleTodos } from './getVisibleTodos';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [status, setStatus] = useState('full');\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    try {\n      getTodos()\n        .then(setTodos);\n    } catch (error) {\n      setTodos([]);\n    }\n  }, []);\n\n  const handleSelectTodoId = useCallback((id: number) => {\n    setSelectedTodoId(id);\n  }, []);\n\n  const handleQuery = useCallback((value: string) => {\n    setQuery(value);\n  }, []);\n  const handleDeleteQuery = useCallback(() => setQuery(''), []);\n\n  const handleStatus = useCallback((value : string) => setStatus(value), []);\n  const handleCloseModal = useCallback(() => setSelectedTodoId(0), []);\n\n  const selectedTodo = useMemo(() => (\n    todos.find(todo => todo.id === selectedTodoId)\n  ), [selectedTodoId]);\n\n  const visibleTodos = useMemo(() => (\n    getVisibleTodos(todos, query, status)\n  ), [todos, query, status]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onQuery={handleQuery}\n                onStatus={handleStatus}\n                onDeleteQuery={handleDeleteQuery}\n                query={query}\n                status={status}\n              />\n            </div>\n\n            <div className=\"block\">\n              {\n                todos.length ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodoId={selectedTodoId}\n                    onSelectTodoId={handleSelectTodoId}\n                  />\n                ) : (\n                  <Loader />\n                )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {\n        selectedTodo && (\n          <TodoModal\n            todo={selectedTodo}\n            onCloseModal={handleCloseModal}\n          />\n        )\n      }\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  query: string,\n  status: string,\n) => {\n  if (status !== 'full' || query) {\n    const normalizedQuery = query\n      .toLowerCase()\n      .split(' ')\n      .filter(Boolean)\n      .join(' ');\n\n    return todos.filter(todo => {\n      const isIncludeQuery = todo.title.toLowerCase().includes(normalizedQuery);\n      let isStatusMatch;\n\n      switch (status) {\n        case 'active':\n          isStatusMatch = todo.completed === false;\n          break;\n\n        case 'completed':\n          isStatusMatch = todo.completed === true;\n          break;\n\n        default:\n          isStatusMatch = true;\n          break;\n      }\n\n      return isIncludeQuery && isStatusMatch;\n    });\n  }\n\n  return todos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}